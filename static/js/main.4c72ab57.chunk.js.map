{"version":3,"sources":["components/Navbar.js","components/Search.js","service/userService.js","components/StatCard.js","App.js","serviceWorker.js","index.js","icons/psn.svg","icons/xbox.svg","icons/battle-net.svg"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginBottom","spacing","menuButton","marginRight","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Search","props","useState","platform","setPlatform","user","setUser","handleImgClick","e","target","getAttribute","TextField","onChange","value","onKeyPress","key","search","InputProps","placeholder","startAdornment","InputAdornment","endAdornment","Icon","data-value","src","BattleNetIcon","alt","onClick","PSNIcon","XboxIcon","fullWidth","getUser","a","uid","replace","url","axios","get","res","data","minWidth","bullet","display","margin","transform","fontSize","pos","StatCard","Card","CardContent","gutterBottom","component","stat","App","searchResults","setSearchResults","searchUser","userService","results","console","log","lifetime","mode","br","properties","Container","maxWidth","Grid","container","Object","keys","map","item","xs","toUpperCase","slice","Boolean","window","location","hostname","match","darkTheme","createMuiTheme","palette","type","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.4c72ab57.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: theme.spacing(3)\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Warzone BR Stats\r\n          </Typography>\r\n          <Button color=\"inherit\">Compare</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { TextField, InputAdornment } from '@material-ui/core'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport PSNIcon from '../icons/psn.svg';\r\nimport XboxIcon from '../icons/xbox.svg';\r\nimport BattleNetIcon from '../icons/battle-net.svg';\r\nimport '../App.css';\r\n\r\nexport default function Search(props) {\r\n    const [platform, setPlatform] = useState('battle');\r\n    const [user, setUser] = useState('');\r\n\r\n    const handleImgClick = (e) => {\r\n        setPlatform(e.target.getAttribute('data-value'));\r\n    };\r\n\r\n    const handleSearchChange = (e) => {\r\n        setUser(e.target.value)\r\n    }\r\n\r\n    const checkForSubmit = (e) => {\r\n        if (e.key === 'Enter') {\r\n            props.search(user, platform);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TextField\r\n            onChange={handleSearchChange}\r\n            onKeyPress={checkForSubmit}\r\n            InputProps={{\r\n                placeholder: \"Search\",\r\n                startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                    </InputAdornment>\r\n                ),\r\n                endAdornment: (\r\n                    <>\r\n                        <InputAdornment>\r\n                            <Icon>\r\n                                <img \r\n                                data-value='battle'\r\n                                src={BattleNetIcon}\r\n                                alt=\"Battle.net icon\" \r\n                                onClick={handleImgClick} \r\n                                className={'icon-hoverable ' + (platform === 'battle' ? 'icon-selected' : '')} />\r\n                            </Icon>\r\n                        </InputAdornment>\r\n                        <InputAdornment>\r\n                            <Icon>\r\n                                <img \r\n                                data-value='psn' \r\n                                src={PSNIcon}\r\n                                alt=\"PSN icon\"\r\n                                onClick={handleImgClick} \r\n                                className={'icon-hoverable ' + (platform === 'psn' ? 'icon-selected' : '')} />\r\n                            </Icon>\r\n                        </InputAdornment>\r\n                        <InputAdornment>\r\n                            <Icon>\r\n                                <img \r\n                                data-value='xbl'\r\n                                src={XboxIcon}\r\n                                alt=\"Xbox icon\" \r\n                                onClick={handleImgClick} \r\n                                className={'icon-hoverable ' + (platform === 'xbl' ? 'icon-selected' : '')} />\r\n                            </Icon>\r\n                        </InputAdornment>\r\n                    </>\r\n                )\r\n            }} \r\n            fullWidth={true} />\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst COD_API_BASE_URL = \"https://my.callofduty.com/api/papi-client/stats/cod/v1/title/mw/platform/\";\r\n\r\nexport default {\r\n    getUser: async (user, platform) => {\r\n        const uid = user.replace(\"#\", \"%23\");\r\n        const url = `${COD_API_BASE_URL + platform}/gamer/${uid}/profile/type/mp`;\r\n        const res = await axios.get(url);\r\n        return res.data;\r\n    }\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function StatCard(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          {props.title}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {props.stat}\r\n        </Typography>\r\n        \r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","import React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport Search from './components/Search';\nimport { Container, Grid } from '@material-ui/core';\nimport userService from './service/userService';\nimport StatCard from './components/StatCard';\nimport './App.css';\n\nfunction App() {\n  const [searchResults, setSearchResults] = useState(null);\n\n  const searchUser = async (user, platform) => {\n    const results = await userService.getUser(user, platform);\n    console.log(results);\n    setSearchResults(results.data.lifetime.mode.br.properties);  \n  }\n\n  const renderSearchResults = () => {\n    return (\n      Object.keys(searchResults).map((key) => {\n        return (\n          <Grid item xs={4}>\n            <StatCard key={key} className=\"stat-card\" title={key[0].toUpperCase() + key.slice(1)} stat={searchResults[key]} />\n          </Grid>\n        )\n      })\n    );\n     \n  }\n\n  return (\n    <div>\n        <Navbar />\n        <Container maxWidth=\"md\">\n          <Search search={searchUser} />\n          <Grid container spacing={3} className=\"stats-container\">\n            {searchResults ? renderSearchResults() : <div></div>}\n          </Grid>\n        </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { CssBaseline } from '@material-ui/core';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <App />\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/psn.70872efd.svg\";","module.exports = __webpack_public_path__ + \"static/media/xbox.faa28b5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/battle-net.355d0860.svg\";"],"sourceRoot":""}