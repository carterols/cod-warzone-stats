{"version":3,"sources":["components/Navbar.js","components/Search.js","service/userService.js","components/UserCard.js","components/Leaderboards.js","components/MatchCard.js","App.js","serviceWorker.js","index.js","icons/psn.svg","icons/xbox.svg","icons/battle-net.svg","icons/trophy.svg"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginBottom","spacing","menuButton","marginRight","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","platformButton","padding","display","justifyContent","flexWrap","chip","margin","Search","props","useState","platform","setPlatform","user","setUser","searches","cookies","get","handleImgClick","e","currentTarget","firstChild","getAttribute","search","a","length","set","JSON","stringify","userName","path","maxAge","hasOwnProperty","toLowerCase","checkForSubmit","key","getPlaceholder","Autocomplete","freeSolo","options","Object","keys","getOptionLabel","option","openOnFocus","value","filterSelectedOptions","onChange","newUser","onInputChange","val","renderInput","params","inputProps","onKeyDown","TextField","placeholder","InputProps","startAdornment","InputAdornment","style","IconButton","color","onClick","Icon","data-value","src","BattleNetIcon","alt","PSNIcon","XboxIcon","endAdornment","fullWidth","COD_API_BASE_URL","getUser","uid","replace","url","axios","res","data","console","log","getFriendsStats","getRecentMatches","typography","button","closeButton","marginLeft","UserCard","wins","kills","kdRatio","downs","topTwentyFive","topTen","topFive","contracts","revives","score","timePlayed","gamesPlayed","deaths","scorePerMinute","cash","colors","renderArrowIcon","stat","fontSize","Card","removeCard","CardContent","align","gutterBottom","Box","parseFloat","toFixed","Divider","Grid","container","item","xs","toLocaleString","seconds","days","Math","floor","leftOverSeconds","hours","minutes","displayTimePlayed","paddingLeft","paddingRight","highlight","palette","type","secondary","main","backgroundColor","lighten","light","text","primary","flex","width","paper","table","minWidth","visuallyHidden","border","clip","height","overflow","top","topDivider","firstPlacement","fifthPlacement","fifteenPlacement","kdColumn","textAlign","centerCircle","marginTop","MatchCard","placement","matchDate","Date","utcStartSeconds","teamKills","playerStats","numPlayers","getColumnWidth","teamStats","players","forEach","player","getTeamKills","Paper","justify","wrap","teamPlacement","placementColor","Trophy","getTrophy","j","k","getPlacementString","sm","map","idx","username","damageDone","assists","getMaxStats","users","userKeys","maxStats","getStatColors","getTeamStats","teams","teamName","pos","team","name","indexOf","withCookies","visibleUsers","setVisibleUsers","searchError","setSearchError","loadingResults","setLoadingResults","recentMatches","setRecentMatches","tabSelected","setTabSelected","useEffect","lastSearchedUser","searchUser","index","userService","results","lifetime","mode","br","properties","avgKills","parseInt","round","avgScore","newVisibleUsers","matches","match","playerCount","teamCount","rankedTeams","filter","undefined","p","handleUserClose","handleAlertClose","handleTabChange","newValue","Container","maxWidth","hidden","Chip","label","onDelete","_","LinearProgress","Tabs","indicatorColor","centered","Tab","renderSearchResults","renderMainStats","renderRecentMatches","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","Boolean","window","location","hostname","darkTheme","createMuiTheme","ReactDOM","render","StrictMode","CookiesProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.dd97f433.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: theme.spacing(3)\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Warzone BR Stats\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { TextField, InputAdornment, IconButton, makeStyles } from '@material-ui/core'\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport PSNIcon from '../icons/psn.svg';\r\nimport XboxIcon from '../icons/xbox.svg';\r\nimport BattleNetIcon from '../icons/battle-net.svg';\r\nimport '../App.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    platformButton: {\r\n        padding: '4px',\r\n        marginRight: '2px'\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        padding: theme.spacing(0.5),\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n}));\r\n\r\nexport default function Search(props) {\r\n    const classes = useStyles();\r\n    const [platform, setPlatform] = useState('battle');\r\n    const [user, setUser] = useState('');\r\n    const searches = props.cookies.get('search_history');\r\n\r\n    function getSearchResults() {\r\n        if (searches) {\r\n            if (searches.hasOwnProperty(platform)) {\r\n                return Object.keys(searches[platform]);\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    const handleImgClick = (e) => {\r\n        setPlatform(e.currentTarget.firstChild.firstChild.firstChild.getAttribute('data-value'));\r\n    };\r\n\r\n    const handleSearchChange = (e, val) => {\r\n        setUser(val);\r\n    }\r\n\r\n    const search = async () => {\r\n        if (!user || user.length === 0) return;\r\n\r\n        const success = await props.search(user, platform);\r\n\r\n        if (success) {\r\n            let searches = props.cookies.get('search_history');\r\n            \r\n            props.cookies.set('lastSearchedUser', JSON.stringify({\r\n                userName: user,\r\n                platform: platform\r\n            }), { path: '/', maxAge: 60 * 60 * 24 * 5 });\r\n            \r\n            if (!searches) {\r\n                searches = {};\r\n            }\r\n\r\n            if (!searches.hasOwnProperty(platform)) {\r\n                searches[platform] = {}\r\n            }\r\n            if (!searches[platform].hasOwnProperty(user.toLowerCase())) {\r\n                searches[platform][user.toLowerCase()] = user;\r\n            }\r\n            // set cookies to expire in 1 year\r\n            props.cookies.set('search_history', JSON.stringify(searches), { path: '/', maxAge: 60 * 60 * 24 * 365 })\r\n        }\r\n        setUser('');\r\n    }\r\n\r\n    const checkForSubmit = (e) => {\r\n        if (e.key === 'Enter') {\r\n            search();\r\n        }\r\n    }\r\n\r\n    function getPlaceholder() {\r\n        if (platform === 'battle') return 'Search Battle.net...';\r\n        else if (platform === 'psn') return 'Search PlayStation Network...';\r\n        else return 'Search Xbox Live...';\r\n    }\r\n\r\n    const renderTextField = (params) => {\r\n        params.inputProps.onKeyDown = checkForSubmit;\r\n        return (\r\n            <TextField\r\n                {...params}\r\n                placeholder={getPlaceholder()}\r\n                InputProps={{\r\n                    ...params.InputProps,\r\n                    placeholder: getPlaceholder(),\r\n                    startAdornment: (\r\n                        <>\r\n                            <InputAdornment style={{ marginBottom: '5px' }}>\r\n                                <IconButton className={classes.platformButton} color='inherit' onClick={handleImgClick} >\r\n                                    <Icon>\r\n                                        <img\r\n                                            data-value='battle'\r\n                                            src={BattleNetIcon}\r\n                                            alt=\"Battle.net icon\"\r\n                                            className={(platform === 'battle' ? 'icon-selected' : '')} />\r\n                                    </Icon>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            <InputAdornment style={{ marginBottom: '5px' }}>\r\n                                <IconButton className={classes.platformButton} color='inherit' onClick={handleImgClick} >\r\n                                    <Icon>\r\n                                        <img\r\n                                            data-value='psn'\r\n                                            src={PSNIcon}\r\n                                            alt=\"PSN icon\"\r\n                                            className={(platform === 'psn' ? 'icon-selected' : '')} />\r\n                                    </Icon>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            <InputAdornment style={{ marginBottom: '5px' }}>\r\n                                <IconButton className={classes.platformButton} color='inherit' onClick={handleImgClick} >\r\n                                    <Icon>\r\n                                        <img\r\n                                            data-value='xbl'\r\n                                            src={XboxIcon}\r\n                                            alt=\"Xbox icon\"\r\n                                            className={(platform === 'xbl' ? 'icon-selected' : '')} />\r\n                                    </Icon>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        </>\r\n                    ),\r\n                    endAdornment: (\r\n                        <InputAdornment style={{ marginBottom: '5px' }}>\r\n                            <IconButton color='primary' onClick={e => search(user, platform)}>\r\n                                <AddCircleOutlineIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    )\r\n                }}\r\n                fullWidth={true}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n\r\n        <Autocomplete\r\n            freeSolo\r\n            options={getSearchResults()}\r\n            getOptionLabel={option => option}\r\n            openOnFocus={false}\r\n            value={user}\r\n            filterSelectedOptions\r\n            onChange={(e, newUser) => setUser(newUser)}\r\n            onInputChange={handleSearchChange}\r\n            renderInput={renderTextField}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst COD_API_BASE_URL = \"https://pacific-badlands-14289.herokuapp.com\";\r\n\r\nexport default {\r\n    getUser: async (user, platform) => {\r\n        const uid = user.replace(\"#\", \"%23\");\r\n        const url = `${COD_API_BASE_URL}/stats/platform/${platform}/gamer/${uid}/profile`;\r\n\r\n        try {\r\n            const res = await axios.get(url);\r\n            return res.data;\r\n        } catch (err) {\r\n            console.log(err);\r\n            return null;\r\n        }\r\n    },\r\n    getFriendsStats: async (user, platform) => {\r\n        const uid = user.replace(\"#\", \"%23\");\r\n        const url = `${COD_API_BASE_URL}/stats/platform/${platform}/gamer/${uid}/friends`;\r\n        try {\r\n            const res = await axios.get(url);\r\n            return res.data;\r\n        } catch (err) {\r\n            console.log(err);\r\n            return null;\r\n        }\r\n    },\r\n    getRecentMatches: async (user, platform) => {\r\n        const uid = user.replace('#', '%23');\r\n        const url = `${COD_API_BASE_URL}/matches/platform/${platform}/user/${uid}`;\r\n        try {\r\n            const res = await axios.get(url);\r\n            return res.data;\r\n        } catch (err) {\r\n            console.log(err);\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Card, CardContent, makeStyles, Divider, Grid, Box, IconButton } from '@material-ui/core';\r\nimport '../App.css';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    ...theme.typography.button,\r\n  },\r\n  closeButton: {\r\n    marginLeft: 'auto'\r\n  }\r\n}));\r\n\r\nfunction displayTimePlayed(seconds) {\r\n  const days = Math.floor(seconds / 86400).toLocaleString();\r\n  let leftOverSeconds = seconds % 86400;\r\n\r\n  const hours = Math.floor(leftOverSeconds / 3600).toLocaleString();\r\n  leftOverSeconds = leftOverSeconds % 3600;\r\n\r\n  const minutes = Math.floor(leftOverSeconds / 60).toLocaleString();\r\n  leftOverSeconds = leftOverSeconds % 60;\r\n\r\n  return `${days} days, ${hours} hours, ${minutes} minutes, ${leftOverSeconds} seconds`;\r\n}\r\n\r\nexport default function UserCard(props) {\r\n  const classes = useStyles();\r\n  const {\r\n    userName,\r\n    wins,\r\n    kills,\r\n    kdRatio,\r\n    downs,\r\n    topTwentyFive,\r\n    topTen,\r\n    contracts,\r\n    revives,\r\n    topFive,\r\n    score,\r\n    timePlayed,\r\n    gamesPlayed,\r\n    scorePerMinute,\r\n    cash,\r\n    deaths\r\n  } = props.data;\r\n\r\n  const colors = props.colors;\r\n\r\n  const renderArrowIcon = (stat) => {\r\n    if (colors[stat] === 'none') {\r\n      return null;\r\n    } else if (colors[stat] === 'error') {\r\n      return (\r\n        <ArrowDownwardIcon color='error' fontSize='inherit' />\r\n      );\r\n    } else if (colors[stat] === 'primary') {\r\n      return (\r\n        <ArrowUpwardIcon color='primary' fontSize='inherit' />\r\n      );\r\n    }\r\n  }\r\n \r\n  const closeCard = (e) => {\r\n    props.removeCard(userName);\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <IconButton onClick={closeCard}>\r\n        <CloseIcon />\r\n      </IconButton>\r\n      <CardContent align='center'>\r\n        <Typography align='center' className={classes.root} gutterBottom>\r\n          {userName}\r\n        </Typography>\r\n        <Box className='circle' margin={2}>\r\n          <Typography variant=\"h5\">\r\n            {renderArrowIcon('kdRatio')}\r\n            {parseFloat(kdRatio).toFixed(2)}\r\n          </Typography>\r\n          <Typography variant=\"h5\" className={classes.root}>\r\n            K/D Ratio\r\n          </Typography>\r\n        </Box>\r\n        <Divider />\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={6}>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Kills\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('kills')}\r\n              {kills.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Deaths\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('deaths')}\r\n              {deaths.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Downs\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('downs')}\r\n              {downs.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Score\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('score')}\r\n              {score.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Time Played\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('timePlayed')}\r\n              {displayTimePlayed(timePlayed)}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Wins\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('wins')}\r\n              {wins.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Games Played\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('gamesPlayed')}\r\n              {gamesPlayed.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Top 5\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('topFive')}\r\n              {topFive.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Top 10\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('topTen')}\r\n              {topTen.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Top 25\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('topTwentyFive')}\r\n              {topTwentyFive.toLocaleString()}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n\r\n  );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\n\r\nfunction descendingComparator (a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator (order, orderBy) {\r\n    return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort (array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    { id: 'userName', numeric: false, disablePadding: true, label: 'USER' },\r\n    { id: 'kills', numeric: true, disablePadding: false, label: 'KILLS' },\r\n    { id: 'deaths', numeric: true, disablePadding: false, label: 'DEATHS' },\r\n    { id: 'downs', numeric: true, disablePadding: false, label: 'DOWNS' },\r\n    { id: 'avgKills', numeric: true, disablePadding: false, label: 'AVG. KILLS' },\r\n    { id: 'kdRatio', numeric: true, disablePadding: false, label: 'K/D RATIO' },\r\n    { id: 'gamesPlayed', numeric: true, disablePadding: false, label: 'GAMES PLAYED' },\r\n    { id: 'wins', numeric: true, disablePadding: false, label: 'WINS' },\r\n    { id: 'score', numeric: true, disablePadding: false, label: 'SCORE' },\r\n    { id: 'avgScore', numeric: true, disablePadding: false, label: 'AVG. SCORE' },\r\n];\r\n\r\nconst EnhancedTableHead = (props) => {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = property => event => {\r\n      onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n            <TableCell padding=\"checkbox\">\r\n                <Checkbox\r\n                indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                checked={rowCount > 0 && numSelected === rowCount}\r\n                onChange={onSelectAllClick}\r\n                color='default'\r\n                inputProps={{ 'aria-label': 'select all users' }}\r\n                />\r\n            </TableCell>\r\n            {headCells.map(headCell => (\r\n                <TableCell\r\n                key={headCell.id}\r\n                align={'left'}\r\n                padding={headCell.disablePadding ? 'none' : 'default'}\r\n                sortDirection={orderBy === headCell.id ? order : false}\r\n                >\r\n                <TableSortLabel\r\n                    active={orderBy === headCell.id}\r\n                    direction={orderBy === headCell.id ? order : 'asc'}\r\n                    onClick={createSortHandler(headCell.id)}\r\n                >\r\n                    {headCell.label}\r\n                    {orderBy === headCell.id ? (\r\n                    <span className={classes.visuallyHidden}>\r\n                        {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                    </span>\r\n                    ) : null}\r\n                </TableSortLabel>\r\n                </TableCell>\r\n            ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired\r\n};\r\n\r\nconst useToolbarStyles = makeStyles(theme => ({\r\n    root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n      theme.palette.type === 'light'\r\n        ? {\r\n            color: theme.palette.secondary.main,\r\n            backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n          }\r\n        : {\r\n            color: theme.palette.text.secondary,\r\n            backgroundColor: theme.palette.primary,\r\n          },\r\n    title: {\r\n      flex: '1 1 100%',\r\n    },\r\n  }));\r\n  \r\nconst EnhancedTableToolbar = props => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n  \r\n    return (\r\n      <Toolbar\r\n        className={clsx(classes.root, {\r\n          [classes.highlight]: numSelected > 0,\r\n        })}\r\n      >\r\n        {numSelected > 0 ? (\r\n          <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\r\n            Leaderboards\r\n          </Typography>\r\n        )}\r\n      </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n  \r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n      minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n    }\r\n}));\r\n  \r\nexport default function EnhancedTable(props) {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = React.useState('desc');\r\n    const [orderBy, setOrderBy] = React.useState('score');\r\n    const selected = props.selected;\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  \r\n    const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc';\r\n      setOrder(isAsc ? 'desc' : 'asc');\r\n      setOrderBy(property);\r\n    };\r\n\r\n    function changeSelected(newSelected) {\r\n        props.changeSelected(newSelected);\r\n    }\r\n  \r\n    const handleSelectAllClick = event => {\r\n      if (event.target.checked) {\r\n          let newSelected = {};\r\n          props.data.forEach(user => {\r\n              newSelected[user.userName] = {\r\n                  data: props.data[user]\r\n              }\r\n          });\r\n        changeSelected(newSelected);\r\n        return;\r\n      }\r\n      changeSelected({});\r\n    };\r\n  \r\n    const handleClick = (event, row) => {\r\n        console.log(row);\r\n      let newSelected = {\r\n        ...selected\r\n      };\r\n  \r\n      if (!selected.hasOwnProperty(row.userName)) {\r\n          newSelected[row.userName] = {\r\n              data: row\r\n          }\r\n      } else {\r\n        delete newSelected[row.userName];\r\n      }\r\n  \r\n      changeSelected(newSelected);\r\n    };\r\n  \r\n    const handleChangePage = (event, newPage) => {\r\n      setPage(newPage);\r\n    };\r\n  \r\n    const handleChangeRowsPerPage = event => {\r\n      setRowsPerPage(parseInt(event.target.value, 10));\r\n      setPage(0);\r\n    };\r\n  \r\n    const isSelected = userName => {\r\n        if (selected.hasOwnProperty(userName)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n  \r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.data.length - page * rowsPerPage);\r\n    \r\n    if (props.data) {\r\n      return (\r\n        <div className={classes.root}>\r\n          <Paper className={classes.paper}>\r\n            <EnhancedTableToolbar numSelected={Object.keys(selected).length} />\r\n            <TableContainer>\r\n              <Table\r\n                className={classes.table}\r\n                aria-labelledby=\"tableTitle\"\r\n                size={'medium'}\r\n                aria-label=\"leaderboards\"\r\n              >\r\n                <EnhancedTableHead\r\n                  classes={classes}\r\n                  numSelected={Object.keys(selected).length}\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  onSelectAllClick={handleSelectAllClick}\r\n                  onRequestSort={handleRequestSort}\r\n                  rowCount={props.data.length}\r\n                />\r\n                <TableBody>\r\n                  {stableSort(props.data, getComparator(order, orderBy))\r\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => {\r\n                      const isItemSelected = isSelected(row.userName);\r\n                      const labelId = `user-checkbox-${index}`;\r\n    \r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          onClick={event => handleClick(event, row)}\r\n                          role=\"checkbox\"\r\n                          aria-checked={isItemSelected}\r\n                          key={index}\r\n                          tabIndex={-1}\r\n                          className={isItemSelected ? 'row-selected' : null}\r\n                          selected={isItemSelected}\r\n                        >\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              checked={isItemSelected}\r\n                              color='default'\r\n                              inputProps={{ 'aria-labelledby': labelId }}\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                            {row.userName}\r\n                          </TableCell>\r\n                          <TableCell align=\"left\">{row.kills}</TableCell>\r\n                          <TableCell align=\"left\">{row.deaths}</TableCell>\r\n                          <TableCell align=\"left\">{row.downs}</TableCell>\r\n                          <TableCell align=\"left\">{row.avgKills}</TableCell>\r\n                          <TableCell align=\"left\">{row.kdRatio}</TableCell>\r\n                          <TableCell align=\"left\">{row.gamesPlayed}</TableCell>\r\n                          <TableCell align=\"left\">{row.wins}</TableCell>\r\n                          <TableCell align=\"left\">{row.score}</TableCell>\r\n                          <TableCell align=\"left\">{row.avgScore}</TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  {emptyRows > 0 && (\r\n                    <TableRow style={{ height: (53) * emptyRows }}>\r\n                      <TableCell colSpan={6} />\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25]}\r\n              component=\"div\"\r\n              count={props.data.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n}","import React from 'react';\r\nimport { Icon, Paper, Typography, Box, makeStyles, Grid, Divider } from '@material-ui/core';\r\nimport '../App.css';\r\nimport Trophy from '../icons/trophy.svg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      ...theme.typography.button,\r\n    },\r\n    container: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    topDivider: {\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    firstPlacement: {\r\n        color: '#FFD700 !important'\r\n    },\r\n    fifthPlacement: {\r\n        color: '#D5D5D7 !important'\r\n    },\r\n    fifteenPlacement: {\r\n        color: '#DA9F65 !important'\r\n    },\r\n    kdColumn: {\r\n        textAlign: 'center'\r\n    },\r\n    centerCircle: {\r\n        marginTop: '16px',\r\n        marginBottom: '16px',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto'\r\n    }\r\n}));\r\n\r\n\r\nfunction getPlacementString(placement) {\r\n    let j = placement % 10, k = placement % 100;\r\n    \r\n    if (j === 1 && k !== 11) {\r\n        return placement + \"ST\";\r\n    }\r\n    if (j === 2 && k !== 12) {\r\n        return placement + \"ND\";\r\n    }\r\n    if (j === 3 && k !== 13) {\r\n        return placement + \"RD\";\r\n    }\r\n    return placement + \"TH\";\r\n}\r\n\r\nfunction getColumnWidth(numPlayers) {\r\n    switch (numPlayers) {\r\n        case 4:\r\n            return 2;\r\n        case 3:\r\n            return 3;\r\n        case 2:\r\n            return 4;\r\n        default:\r\n            return 6;\r\n    }\r\n}\r\n\r\nfunction getTeamKills(players) {\r\n    let kills = 0;\r\n    players.forEach((player) => {\r\n        kills += player.playerStats.kills;\r\n    });\r\n    return kills;\r\n}\r\n\r\nexport default function MatchCard(props) {\r\n    const classes = useStyles();\r\n    const data = props.data;\r\n    const matchDate = new Date(data.utcStartSeconds * 1000);\r\n    const matchDuration = Math.floor(data.playerStats.timePlayed / 60);\r\n    const columnWidth = getColumnWidth(data.teamStats.players.length);\r\n    const teamKills = getTeamKills(data.teamStats.players);\r\n\r\n    function getPlacementColor(placement) {\r\n        if (placement === 1) {\r\n            return classes.firstPlacement;\r\n        } else if (placement <= 5) {\r\n            return classes.fifthPlacement;\r\n        } else if (placement <= 15) {\r\n            return classes.fifteenPlacement;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getTrophy(placement) {\r\n        let placementColor = '';\r\n        if (placement === 1) {\r\n            placementColor = 'first-placement-svg';\r\n        } else if (placement <= 5) {\r\n            placementColor = 'fifth-placement-svg';\r\n        } else if (placement <= 15) {\r\n            placementColor = 'fifteen-placement-svg';\r\n        }\r\n        if (placement <= 15) {\r\n            return (\r\n                <Icon fontSize='inherit'>\r\n                    <img\r\n                        data-value='battle'\r\n                        src={Trophy}\r\n                        alt=\"Battle.net icon\"\r\n                        className={placementColor}\r\n                    />\r\n                </Icon>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.container}>\r\n            <Grid container justify='center' spacing={3} wrap='wrap'>\r\n                <Grid item xs={6}>\r\n                    <Typography variant='h6' align='left' color='textPrimary'>\r\n                        {matchDate.toLocaleString()}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <Typography variant='h6' align='right' className={getPlacementColor(data.playerStats.teamPlacement)}>\r\n                        {getTrophy(data.playerStats.teamPlacement)}\r\n                        &nbsp;\r\n                        {getPlacementString(data.playerStats.teamPlacement)} PLACE\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider />\r\n                </Grid>\r\n                <Grid item xs={12} sm>\r\n                    <Typography align='center' variant=\"h5\" className={classes.root}>\r\n                        KILLS: {teamKills} \r\n                    </Typography>\r\n                    <Box className={'circle ' + classes.centerCircle}>\r\n                        <Typography align='center' variant=\"h5\">\r\n                            {parseFloat(data.playerStats.kdRatio).toFixed(2)}\r\n                        </Typography>\r\n                        <Typography align='center' variant=\"h5\" className={classes.root}>\r\n                            K/D Ratio\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                {data.teamStats.players.map((player, idx) => {\r\n                    return (\r\n                        <Grid item key={idx} xs={6} sm>\r\n                            <Typography align='left' variant=\"h5\" className={classes.root} color={player.username === data.player.username ? 'primary' : 'textSecondary'}>\r\n                                {player.username}\r\n                            </Typography>\r\n                            <Divider />\r\n                            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n                                Score\r\n                            </Typography>\r\n                            <Typography align='left' variant='h4' className={classes.root}>\r\n                                {player.playerStats.score.toLocaleString()}\r\n                            </Typography>\r\n                            <Typography variant='h5' className={classes.root} color='textSecondary'>\r\n                                Kills\r\n                            </Typography>\r\n                            <Typography variant='h4' className={classes.root}>\r\n                                {player.playerStats.kills}\r\n                            </Typography>\r\n                            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n                                Deaths\r\n                            </Typography>\r\n                            <Typography align='left' variant='h4' className={classes.root}>\r\n                                {player.playerStats.deaths}\r\n                            </Typography>\r\n                            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n                                Damage Done\r\n                            </Typography>\r\n                            <Typography align='left' variant='h4' className={classes.root}>\r\n                                {player.playerStats.damageDone}\r\n                            </Typography>  \r\n                            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n                                Assists\r\n                            </Typography>\r\n                            <Typography align='left' variant='h4' className={classes.root}>\r\n                                {player.playerStats.assists}\r\n                            </Typography>\r\n                        </Grid>\r\n                    )\r\n                })}          \r\n            </Grid>\r\n        </Paper>\r\n    )\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Search from \"./components/Search\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  LinearProgress,\r\n  Snackbar,\r\n  Paper,\r\n  Chip,\r\n  makeStyles,\r\n  Button,\r\n  Tabs,\r\n  Tab\r\n} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport userService from \"./service/userService\";\r\nimport UserCard from \"./components/UserCard\";\r\nimport { withCookies } from \"react-cookie\";\r\nimport Leaderboards from \"./components/Leaderboards\";\r\nimport MatchCard from \"./components/MatchCard\";\r\nimport \"./App.css\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"start\",\r\n    flexWrap: \"wrap\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: \"2rem\"\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5)\r\n  },\r\n  marginTop: {\r\n    marginTop: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction getMaxStats(users) {\r\n  const userKeys = Object.keys(users);\r\n  let maxStats = {};\r\n\r\n  if (userKeys.length < 2) {\r\n    return null;\r\n  }\r\n\r\n  userKeys.forEach(user => {\r\n    Object.keys(users[user].data).forEach(key => {\r\n      if (\r\n        maxStats.hasOwnProperty(key) &&\r\n        users[user].data[key] > users[maxStats[key]].data[key]\r\n      ) {\r\n        maxStats[key] = user;\r\n      } else if (!maxStats.hasOwnProperty(key)) {\r\n        maxStats[key] = user;\r\n      }\r\n    });\r\n  });\r\n\r\n  return maxStats;\r\n}\r\n\r\nfunction getStatColors(user, maxStats) {\r\n  let colors = {};\r\n  // if there is 1 or less users\r\n  if (!maxStats) {\r\n    Object.keys(user.data).forEach(key => {\r\n      colors[key] = \"none\";\r\n    });\r\n\r\n    return colors;\r\n  }\r\n\r\n  Object.keys(maxStats).forEach(stat => {\r\n    if (maxStats[stat] !== user.data.userName) {\r\n      colors[stat] = \"error\";\r\n    } else {\r\n      colors[stat] = \"primary\";\r\n    }\r\n  });\r\n\r\n  return colors;\r\n}\r\n\r\nfunction getTeamStats(teams, teamName) {\r\n  const pos = teams.map(team => team.name).indexOf(teamName);\r\n  return teams[pos];\r\n}\r\n\r\nfunction App(props) {\r\n  const classes = useStyles();\r\n  const [visibleUsers, setVisibleUsers] = useState({});\r\n  const [searchError, setSearchError] = useState(false);\r\n  const [loadingResults, setLoadingResults] = useState(false);\r\n  const [allUsers, setAllUsers] = useState({});\r\n  const [recentMatches, setRecentMatches] = useState([]);\r\n  const [tabSelected, setTabSelected] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const lastSearchedUser = props.cookies.get('lastSearchedUser');\r\n\r\n    if (lastSearchedUser) {\r\n      searchUser(lastSearchedUser.userName, lastSearchedUser.platform);\r\n    }\r\n  }, [])\r\n\r\n\r\n  const searchUser = async (user, platform) => {\r\n    if (visibleUsers.hasOwnProperty(user)) {\r\n      return false;\r\n    }\r\n\r\n    setLoadingResults(true);\r\n    const results = await userService.getUser(user, platform);\r\n\r\n    if (results) {\r\n      let player = {};\r\n      // let newAllUsers = {};\r\n\r\n      player.data = results.lifetime.mode.br.properties;\r\n      player.data.kdRatio = parseFloat(player.data.kdRatio.toFixed(2));\r\n      player.data.avgKills = parseInt(\r\n        Math.round(player.data.kills / player.data.gamesPlayed)\r\n      );\r\n      player.data.avgScore = parseInt(\r\n        Math.round(player.data.score / player.data.gamesPlayed)\r\n      );\r\n      player.data.userName = results.username;\r\n      player.data.platform = platform;\r\n      \r\n      let newVisibleUsers = {...visibleUsers};\r\n      \r\n      newVisibleUsers[player.data.userName] = player;\r\n      // newAllUsers[player.data.userName] = player;\r\n      \r\n      if (Object.keys(newVisibleUsers).length === 1) {\r\n        let matches = await userService.getRecentMatches(user, platform);\r\n        matches = matches.matches.map(match => ({\r\n          utcStartSeconds: match.utcStartSeconds,\r\n          playerCount: match.playerCount,\r\n          player: match.player,\r\n          mode: match.mode,\r\n          playerStats: match.playerStats,\r\n          teamCount: match.teamCount,\r\n          teamStats: getTeamStats(match.rankedTeams, match.player.team)\r\n        })).filter(match => match.teamStats !== undefined && (match.mode === 'br_89' || match.mode === 'br_25' ));\r\n        setRecentMatches(matches);\r\n      }\r\n\r\n      // let friendsResults = await userService.getFriendsStats(user, platform);\r\n      // if (friendsResults && friendsResults.status === \"success\") {\r\n      //   friendsResults = friendsResults.data;\r\n      //   friendsResults = friendsResults.forEach(friend => {\r\n      //     if (friend.platform === \"uno\") {\r\n      //       friend.platform = \"battle\";\r\n      //     }\r\n      //     let data = friend.lifetime.mode.br.properties;\r\n      //     data.kdRatio = parseFloat(data.kdRatio.toFixed(2));\r\n      //     newAllUsers[friend.username] = {\r\n      //       data: {\r\n      //         ...data,\r\n      //         userName: friend.username,\r\n      //         avgKills: parseInt(Math.round(data.kills / data.gamesPlayed)),\r\n      //         avgScore: parseInt(Math.round(data.score / data.gamesPlayed)),\r\n      //         platform: friend.platform\r\n      //       }\r\n      //     };\r\n      //   });\r\n      // }\r\n\r\n      const maxStats = getMaxStats(newVisibleUsers);\r\n\r\n      Object.keys(newVisibleUsers).forEach(p => {\r\n        newVisibleUsers[p].colors = getStatColors(newVisibleUsers[p], maxStats);\r\n      });\r\n\r\n      setLoadingResults(false);\r\n      setVisibleUsers(newVisibleUsers);\r\n      // setAllUsers(newAllUsers);\r\n      return true;\r\n    } else {\r\n      setSearchError(true);\r\n      setLoadingResults(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleUserClose = userName => {\r\n    let newVisibleUsers = {\r\n      ...visibleUsers\r\n    };\r\n\r\n    delete newVisibleUsers[userName];\r\n\r\n    const maxStats = getMaxStats(newVisibleUsers);\r\n\r\n    Object.keys(newVisibleUsers).forEach(p => {\r\n      newVisibleUsers[p].colors = getStatColors(newVisibleUsers[p], maxStats);\r\n    });\r\n\r\n    setVisibleUsers(newVisibleUsers);\r\n  };\r\n\r\n  const renderSearchResults = index => {\r\n    if (Object.keys(visibleUsers).length > 0) {\r\n      return Object.keys(visibleUsers).map(user => {\r\n        return (\r\n          <Grid item hidden={index !== tabSelected} key={user} sm={6}>\r\n            <UserCard\r\n              data={visibleUsers[user].data}\r\n              colors={visibleUsers[user].colors}\r\n              removeCard={handleUserClose}\r\n            />\r\n          </Grid>\r\n        );\r\n      });\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderTags = index => {\r\n    if (Object.keys(visibleUsers).length > 0) {\r\n      return (\r\n        <Paper hidden={index !== tabSelected} className={classes.root}>\r\n          \r\n          {Object.keys(visibleUsers).map(user => {\r\n            return (\r\n              <Chip\r\n                key={user}\r\n                label={user}\r\n                onDelete={_ => handleUserClose(user)}\r\n                className={classes.chip}\r\n              />\r\n            );\r\n          })}\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderProgressBar = () => {\r\n    if (loadingResults) {\r\n      return (\r\n        <Grid item sm={12}>\r\n          <LinearProgress color=\"primary\" />\r\n        </Grid>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  function getRows() {\r\n    return Object.keys(allUsers).map(user => allUsers[user].data);\r\n  }\r\n\r\n  const changeSelected = selectedUsers => {\r\n    const maxStats = getMaxStats(selectedUsers);\r\n    Object.keys(selectedUsers).forEach(user => {\r\n      selectedUsers[user].colors = getStatColors(selectedUsers[user], maxStats);\r\n    });\r\n    setVisibleUsers(selectedUsers);\r\n  };\r\n\r\n  const renderLeaderboards = index => {\r\n    if (Object.keys(allUsers).length > 1) {\r\n      return (\r\n        <Grid item hidden={index !== tabSelected} sm={12}>\r\n          <Leaderboards\r\n            data={getRows()}\r\n            selected={visibleUsers}\r\n            changeSelected={changeSelected}\r\n          />\r\n        </Grid>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleAlertClose = () => {\r\n    setSearchError(false);\r\n  };\r\n\r\n  const handleTabChange = (e, newValue) => {\r\n    setTabSelected(newValue);\r\n  };\r\n\r\n  const renderRecentMatches = index => {\r\n    if (recentMatches.length > 0) {\r\n      return (\r\n        <Grid container spacing={3} className=\"stats-container\">\r\n          {recentMatches.map((match, idx) => {\r\n            return (\r\n              <Grid item hidden={index !== tabSelected} key={idx} sm={12}>\r\n                <MatchCard data={match} />\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderMainStats = index => {\r\n    return (\r\n      <Grid container spacing={3} className=\"stats-container\">\r\n        {renderSearchResults(index)}\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  const renderTabs = () => {\r\n    if (Object.keys(visibleUsers).length > 0) {\r\n      return (\r\n        <Paper className={classes.marginTop}>\r\n          <Tabs\r\n            value={tabSelected}\r\n            onChange={handleTabChange}\r\n            variant='fullWidth'\r\n            indicatorColor=\"primary\"\r\n            centered\r\n          >\r\n            <Tab label=\"Overview\" />\r\n            <Tab label=\"Recent Matches\" />\r\n          </Tabs>\r\n        </Paper>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Container maxWidth=\"lg\">\r\n        \r\n        {renderTags(0)} <Search search={searchUser} cookies={props.cookies} />\r\n        {renderProgressBar()} {renderTabs()} {renderMainStats(0)}\r\n        {renderRecentMatches(1)}\r\n      </Container>\r\n      <Snackbar\r\n        open={searchError}\r\n        autoHideDuration={3000}\r\n        onClose={handleAlertClose}\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\"\r\n        }}\r\n      >\r\n        <Alert onClose={handleAlertClose} severity=\"error\">\r\n          The username you entered was invalid.\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withCookies(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { CssBaseline } from '@material-ui/core';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from 'react-cookie';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <MuiThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <App />\n      </MuiThemeProvider>\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/psn.70872efd.svg\";","module.exports = __webpack_public_path__ + \"static/media/xbox.faa28b5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/battle-net.355d0860.svg\";","module.exports = __webpack_public_path__ + \"static/media/trophy.b42e1893.svg\";"],"sourceRoot":""}