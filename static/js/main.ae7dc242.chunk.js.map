{"version":3,"sources":["components/Navbar.js","components/Search.js","service/userService.js","components/StatCard.js","App.js","serviceWorker.js","index.js","icons/psn.svg","icons/xbox.svg","icons/battle-net.svg"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginBottom","spacing","menuButton","marginRight","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","platformButton","padding","Search","props","useState","platform","setPlatform","user","setUser","searches","cookies","get","handleImgClick","e","currentTarget","firstChild","getAttribute","search","a","console","log","hasOwnProperty","toLowerCase","set","JSON","stringify","checkForSubmit","key","getPlaceholder","Autocomplete","freeSolo","options","Object","keys","value","onInputChange","val","renderInput","params","TextField","placeholder","InputProps","startAdornment","InputAdornment","style","IconButton","color","onClick","Icon","data-value","src","BattleNetIcon","alt","PSNIcon","XboxIcon","endAdornment","fullWidth","onKeyPress","getUser","uid","replace","url","axios","res","data","status","typography","button","closeButton","marginLeft","StatCard","userName","wins","kills","kdRatio","downs","topTwentyFive","topTen","topFive","contracts","revives","score","timePlayed","gamesPlayed","deaths","scorePerMinute","cash","colors","renderArrowIcon","stat","fontSize","Card","removeCard","index","CardContent","align","gutterBottom","Box","margin","parseFloat","toFixed","Divider","Grid","container","item","xs","toLocaleString","seconds","days","Math","floor","leftOverSeconds","hours","minutes","displayTimePlayed","getStatColors","idx","users","maxStats","length","forEach","i","value1","idx1","value2","idx2","maxIdx","withCookies","setUsers","searchError","setSearchError","searchUser","player","isLoading","userService","results","lifetime","mode","br","properties","username","players","map","p","handleUserClose","oldUsers","filter","_","handleAlertClose","Container","maxWidth","loading","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","Boolean","window","location","hostname","match","darkTheme","createMuiTheme","palette","type","ReactDOM","render","StrictMode","CookiesProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.ae7dc242.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: theme.spacing(3)\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Warzone BR Stats\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { TextField, InputAdornment, IconButton, makeStyles } from '@material-ui/core'\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport PSNIcon from '../icons/psn.svg';\r\nimport XboxIcon from '../icons/xbox.svg';\r\nimport BattleNetIcon from '../icons/battle-net.svg';\r\nimport '../App.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    platformButton: {\r\n        padding: '4px',\r\n        marginRight: '2px'\r\n    }\r\n}));\r\n\r\nexport default function Search(props) {\r\n    const classes = useStyles();\r\n    const [platform, setPlatform] = useState('battle');\r\n    const [user, setUser] = useState('');\r\n    const searches = props.cookies.get('search_history');\r\n\r\n    function getSearchResults() {\r\n        if (searches) {\r\n            if (searches.hasOwnProperty(platform)) {\r\n                return Object.keys(searches[platform]);\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    const handleImgClick = (e) => {\r\n        setPlatform(e.currentTarget.firstChild.firstChild.firstChild.getAttribute('data-value'));\r\n    };\r\n\r\n    const handleSearchChange = (e, val) => {\r\n        setUser(val)\r\n    }\r\n\r\n    const search = async () => {\r\n        const success = await props.search(user, platform);\r\n        if (success) {\r\n            let searches = props.cookies.get('search_history');\r\n            console.log(searches);\r\n            if (!searches) {\r\n                searches = {};\r\n            }\r\n\r\n            if (!searches.hasOwnProperty(platform)) {\r\n            searches[platform] = {}\r\n            }\r\n            if (!searches[platform].hasOwnProperty(user.toLowerCase())) {\r\n            searches[platform][user.toLowerCase()] = user;\r\n            }\r\n            props.cookies.set('search_history', JSON.stringify(searches))\r\n            \r\n        }   \r\n        setUser('');\r\n    }\r\n\r\n    const checkForSubmit = (e) => {\r\n        if (e.key === 'Enter') {\r\n            search();\r\n        }\r\n    }\r\n\r\n    function getPlaceholder() {\r\n        if (platform === 'battle') return 'Search Battle.net...';\r\n        else if (platform === 'psn') return 'Search PlayStation Network...';\r\n        else return 'Search Xbox Live...';\r\n    }\r\n\r\n    const renderTextField = (params) => {\r\n        return (\r\n            <TextField\r\n                {...params}\r\n                placeholder={getPlaceholder()}\r\n                InputProps={{\r\n                    ...params.InputProps,\r\n                    placeholder: getPlaceholder(),\r\n                    startAdornment: (\r\n                        <>\r\n                            <InputAdornment style={{marginBottom: '5px'}}>\r\n                                <IconButton className={classes.platformButton} color='inherit' onClick={handleImgClick} >\r\n                                    <Icon>\r\n                                        <img \r\n                                        data-value='battle'\r\n                                        src={BattleNetIcon}\r\n                                        alt=\"Battle.net icon\" \r\n                                        className={(platform === 'battle' ? 'icon-selected' : '')} />\r\n                                    </Icon>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            <InputAdornment style={{marginBottom: '5px'}}>\r\n                                <IconButton className={classes.platformButton} color='inherit' onClick={handleImgClick} >\r\n                                    <Icon>\r\n                                        <img \r\n                                        data-value='psn' \r\n                                        src={PSNIcon}\r\n                                        alt=\"PSN icon\"\r\n                                        className={(platform === 'psn' ? 'icon-selected' : '')} />\r\n                                    </Icon>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            <InputAdornment style={{marginBottom: '5px'}}>\r\n                                <IconButton className={classes.platformButton} color='inherit' onClick={handleImgClick} >\r\n                                    <Icon>\r\n                                        <img \r\n                                        data-value='xbl'\r\n                                        src={XboxIcon}\r\n                                        alt=\"Xbox icon\" \r\n                                        className={(platform === 'xbl' ? 'icon-selected' : '')} />\r\n                                    </Icon>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        </>\r\n                    ),\r\n                    endAdornment: (\r\n                        <InputAdornment style={{marginBottom: '5px'}}>\r\n                            <IconButton color='primary' onClick={e => search(user, platform)}>\r\n                                <AddCircleOutlineIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    )\r\n                }}\r\n                fullWidth={true}\r\n                onKeyPress={checkForSubmit}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Autocomplete\r\n            freeSolo\r\n            options={getSearchResults()}\r\n            value={user}\r\n            onInputChange={handleSearchChange}\r\n            renderInput={renderTextField}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst COD_API_BASE_URL = \"https://my.callofduty.com/api/papi-client/stats/cod/v1/title/mw/platform/\";\r\n\r\nexport default {\r\n    getUser: async (user, platform) => {\r\n        const uid = user.replace(\"#\", \"%23\");\r\n        const url = `${COD_API_BASE_URL + platform}/gamer/${uid}/profile/type/mp`;\r\n        const res = await axios.get(url);\r\n\r\n        if (res.data.status !== 'error') {\r\n            return res.data;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Card, CardContent, makeStyles, Divider, Grid, Box, IconButton } from '@material-ui/core';\r\nimport '../App.css';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    ...theme.typography.button,\r\n  },\r\n  closeButton: {\r\n    marginLeft: 'auto'\r\n  }\r\n}));\r\n\r\nfunction displayTimePlayed(seconds) {\r\n  const days = Math.floor(seconds / 86400).toLocaleString();\r\n  let leftOverSeconds = seconds % 86400;\r\n\r\n  const hours = Math.floor(leftOverSeconds / 3600).toLocaleString();\r\n  leftOverSeconds = leftOverSeconds % 3600;\r\n\r\n  const minutes = Math.floor(leftOverSeconds / 60).toLocaleString();\r\n  leftOverSeconds = leftOverSeconds % 60;\r\n\r\n  return `${days} days, ${hours} hours, ${minutes} minutes, ${leftOverSeconds} seconds`;\r\n}\r\n\r\nexport default function StatCard(props) {\r\n  const classes = useStyles();\r\n  const {\r\n    userName,\r\n    wins,\r\n    kills,\r\n    kdRatio,\r\n    downs,\r\n    topTwentyFive,\r\n    topTen,\r\n    contracts,\r\n    revives,\r\n    topFive,\r\n    score,\r\n    timePlayed,\r\n    gamesPlayed,\r\n    scorePerMinute,\r\n    cash,\r\n    deaths\r\n  } = props.data;\r\n\r\n  const colors = props.colors;\r\n\r\n  const renderArrowIcon = (stat) => {\r\n    if (colors[stat] === 'none') {\r\n      return null;\r\n    } else if (colors[stat] === 'error') {\r\n      return (\r\n        <ArrowDownwardIcon color='error' fontSize='inherit' />\r\n      );\r\n    } else if (colors[stat] === 'primary') {\r\n      return (\r\n        <ArrowUpwardIcon color='primary' fontSize='inherit' />\r\n      );\r\n    }\r\n  }\r\n \r\n  const closeCard = (e) => {\r\n    props.removeCard(props.index);\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <IconButton onClick={closeCard}>\r\n        <CloseIcon />\r\n      </IconButton>\r\n      <CardContent align='center'>\r\n        <Typography align='center' className={classes.root} gutterBottom>\r\n          {userName}\r\n        </Typography>\r\n        <Box className='circle' margin={2}>\r\n          <Typography align='center' variant=\"h5\">\r\n            {renderArrowIcon('kdRatio')}\r\n            {parseFloat(kdRatio).toFixed(2)}\r\n            <Typography align='center' variant=\"h5\" className={classes.root}>\r\n              K/D Ratio\r\n            </Typography>\r\n          </Typography>\r\n        </Box>\r\n        <Divider />\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={6}>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Kills\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('kills')}\r\n              {kills.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Deaths\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('deaths')}\r\n              {deaths.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Downs\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('downs')}\r\n              {downs.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Score\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('score')}\r\n              {score.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Time Played\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('timePlayed')}\r\n              {displayTimePlayed(timePlayed)}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Wins\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('wins')}\r\n              {wins.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Games Played\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('gamesPlayed')}\r\n              {gamesPlayed.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Top 5\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('topFive')}\r\n              {topFive.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Top 10\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('topTen')}\r\n              {topTen.toLocaleString()}\r\n            </Typography>\r\n            <Typography align='left' variant=\"h5\" className={classes.root} color='textSecondary'>\r\n              Top 25\r\n            </Typography>\r\n            <Typography align='left' variant='h4' className={classes.root}>\r\n              {renderArrowIcon('topTwentyFive')}\r\n              {topTwentyFive.toLocaleString()}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n\r\n  );\r\n}","import React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport Search from './components/Search';\nimport { Container, Grid, IconButton, Snackbar } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport userService from './service/userService';\nimport StatCard from './components/StatCard';\nimport { withCookies } from 'react-cookie';\nimport './App.css';\n\nfunction getMax(value1, idx1, value2, idx2) {\n  if (value1 > value2) return idx1\n  else return idx2;\n}\n\nfunction getStatColors(idx, users) {\n  let colors = {};\n  let maxStats = {};\n\n  if (users.length < 2) {\n    Object.keys(users[idx].data).forEach(key => {\n      colors[key] = 'none';\n    });\n\n    return colors;\n  }\n\n  for (let i = 0; i < users.length; i++) {\n    if (i !== idx) {\n      Object.keys(users[idx].data).forEach(key => {\n        const maxIdx = getMax(users[idx].data[key], idx, users[i].data[key], i);\n        if (maxStats.hasOwnProperty(key) && users[maxIdx].data[key] > users[maxStats[key]].data[key]) {\n          maxStats[key] = maxIdx;\n        } else if (!maxStats.hasOwnProperty(key)) {\n          maxStats[key] = maxIdx;\n        }\n      })\n    }\n  }\n\n  Object.keys(maxStats).forEach(stat => {\n    if (maxStats[stat] !== idx) {\n      colors[stat] = 'error';\n    } else {\n      colors[stat] = 'primary';\n    }\n  });\n\n  return colors;\n}\n\nfunction App(props) {\n  const [users, setUsers] = useState([]);\n  const [searchError, setSearchError] = useState(false);\n\n  const searchUser = async (user, platform) => {\n    let player = {\n      isLoading: true\n    };\n    const results = await userService.getUser(user, platform);\n    if (results) {\n      player['data'] = results.data.lifetime.mode.br.properties;\n      player['data']['userName'] = results.data.username;\n      player.isLoading = false;\n      let players = [...users, player];\n      players = players.map((p, idx) => {\n        return {\n          ...p,\n          colors: getStatColors(idx, players)\n        }\n      })\n      setUsers(players);\n      return true;\n    } else {\n      player.isLoading = false;\n      setSearchError(true);\n      return false;\n    }\n  }\n\n  const handleUserClose = (idx) => {\n    setUsers(oldUsers => oldUsers.filter((_, index) => index !== idx));\n  }\n\n  const renderSearchResults = () => {\n    return (\n      users.map((user, idx) => {\n        return (\n          <Grid item key={idx} xs={6}>\n            <StatCard data={user.data} colors={user.colors} index={idx} removeCard={handleUserClose} loading={user.isLoading} />\n          </Grid>\n        )\n      })\n    );\n  }\n\n  const handleAlertClose = () => {\n    setSearchError(false);\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <Container maxWidth=\"md\">\n        <Search search={searchUser} cookies={props.cookies} />\n        <Grid container spacing={3} className=\"stats-container\">\n          {users.length > 0 ? renderSearchResults() : null}\n        </Grid>\n      </Container>\n\n      <Snackbar open={searchError} autoHideDuration={3000} onClose={handleAlertClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n        <Alert onClose={handleAlertClose} severity=\"error\">\n          The username you entered was invalid.\n          </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { CssBaseline } from '@material-ui/core';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from 'react-cookie';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <MuiThemeProvider theme={darkTheme}>\n        <CssBaseline />\n        <App />\n      </MuiThemeProvider>\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/psn.70872efd.svg\";","module.exports = __webpack_public_path__ + \"static/media/xbox.faa28b5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/battle-net.355d0860.svg\";"],"sourceRoot":""}